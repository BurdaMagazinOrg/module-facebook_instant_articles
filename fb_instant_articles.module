<?php

/**
 * @file
 * Contains fb_instant_articles.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeTypeInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;

/**
 * Implements hook_help().
 */
function fb_instant_articles_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the fb_instant_articles module.
    case 'help.page.fb_instant_articles':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Base module for Facebook Instant Articles.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function fb_instant_articles_page_attachments_alter(array &$page) {
  $config = \Drupal::config('fb_instant_articles.adminconfig');
  $path_matcher = \Drupal::service('path.matcher');

  if ($path_matcher->isFrontPage() && $page_id = $config->get('pagesid')) {
    $meta_page_id = [
      '#tag' => 'meta',
      '#attributes' => [
        'property' => 'fb:pages',
        'content' => $page_id,
      ],
    ];
    $page['#attached']['html_head'][] = [$meta_page_id, 'fia_pagesid'];
  }
}

/**
 * Implements hook_init().
 */
function fb_instant_articles_init() {
  $enable_transformer_logging = \Drupal::config('fb_instant_articles_enable_logging');
  $appender = array(
    'class' => $enable_transformer_logging ? '\Drupal\fb_instant_articles\DrupalLoggerAppender' : 'LoggerAppenderNull',
    'layout' => array(
      'class' => 'LoggerLayoutSimple',
    ),
  );
  $configuration = array(
    'rootLogger' => array(
      'appenders' => array(
        'facebook-instantarticles-transformer',
        'facebook-instantarticles-client',
      ),
    ),
    'appenders' => array(
      'facebook-instantarticles-transformer' => $appender,
      'facebook-instantarticles-client' => $appender,
    ),
  );
  \Logger::configure($configuration);
}

/**
 * Implements hook_form_FORM_ID_alter() for \Drupal\node\NodeTypeForm.
 *
 * @see fb_instant_articles_form_node_type_form_builder()
 */
function fb_instant_articles_form_node_type_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeTypeInterface $node_type */
  $node_type = $form_state->getFormObject()->getEntity();

  // Add a vertical tab to the node type form.
  $form['fb_instant_articles'] = [
    '#type' => 'details',
    '#title' => t('Facebook Instant Articles'),
    '#group' => 'additional_settings',
    '#access' => \Drupal::currentUser()->hasPermission('administer fb_instant_articles'),
  ];

  // Facebook Instant Articles enabled checkbox.
  $form['fb_instant_articles']['fb_instant_articles_enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable Facebook Instant Articles'),
    '#description' => t('Enable content of this type with support for Facebook Instant Articles.'),
    '#weight' => 0,
    '#default_value' => $node_type->getThirdPartySetting('fb_instant_articles', 'fb_instant_articles_enabled'),
  ];

  $form['#entity_builders'][] = 'fb_instant_articles_form_node_type_form_builder';
}

/**
 * Entity builder for the node type form with the FBIA toggle.
 *
 * @see fb_instant_articles_display_form_node_type_form_alter()
 */
function fb_instant_articles_form_node_type_form_builder($entity_type, NodeTypeInterface $type, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('fb_instant_articles_enabled') === 1) {
    /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
    if ($display = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.' . $type->id() . '.fb_instant_articles')) {
      $display->setStatus(TRUE)
        ->save();
    }
    else {
      $display = new EntityViewDisplay([
        'id' => 'node.' . $type->id() . '.fb_instant_articles',
        'targetEntityType' => 'node',
        'bundle' => $type->id(),
        'mode' => 'fb_instant_articles',
        'status' => TRUE,
      ], 'entity_view_display');
      $display->save();
    }
    $type->setThirdPartySetting('fb_instant_articles', 'fb_instant_articles_enabled', 1);
  }
  else {
    /** @var \Drupal\Core\Entity\Display\EntityDisplayInterface $display */
    if ($display = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.' . $type->id() . '.fb_instant_articles')) {
      $display->setStatus(FALSE)
        ->save();
    }
    $type->unsetThirdPartySetting('fb_instant_articles', 'fb_instant_articles_enabled');
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function fb_instant_articles_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  $entity_types['entity_view_display']->setFormClass('edit', 'Drupal\fb_instant_articles\Form\EntityViewDisplayEditForm');
}
